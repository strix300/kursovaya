#define _CRT_SECURE_NO_DEPRECATE
#define _USE_MATH_DEFINES
#include <math.h>
#include <stdlib.h>
#include <locale.h>
#include <stdio.h>
#include <string.h>
#define SIZE 20
#define h 20 //width
#define w 4  //height
#define FILESIZE 40

struct nname
{
	char name2[SIZE], bestn[SIZE] ,topn[SIZE], topetap[SIZE];
};

int readfile(char filename[FILESIZE], float table[h][w], struct nname n[SIZE], float time[SIZE]);
void source_table(struct nname n[SIZE],float table[h][w],float time[SIZE]);
void result_table(struct nname n[SIZE], float table[h][w], float time[SIZE]);
float replacement(float* table[h][w], int ww, int hh, float b);
void best_stage_time(struct nname n[SIZE], float table[h][w],int etap);
void worst_stage_time(struct nname n[SIZE], float table[h][w], int etap);
void sort_stage(struct nname n[SIZE], float table[h][w], int etap);
void sumtime(float time[SIZE]);
void averagetime(float time[SIZE]);
void mintime(float time[SIZE]);
void maxtime(float time[SIZE]);
void personstat(struct nname n[SIZE], float table[h][w], float time[SIZE], char namesearch[SIZE]);

int main()
{
	setlocale(LC_ALL, "RUS");
	system("chcp 1251");
	system("cls");
	int heught = 20; int weight = 4,etap, menu = 1, ww, hh;
	float table[h][w], time[SIZE], b;
	char namesearch[SIZE], filename[FILESIZE],rasshirenie[6] = {".txt"};
	printf("Введите название файла (без указания расширения файла)\n");
	scanf("%s", filename);
	strcat(filename, rasshirenie);
	struct nname n[SIZE];
	readfile(filename, table, n, time);
	while (menu > 0)
	{
		system("cls");
		printf("введите 1 для того чтобы напечатать исходную таблицу\nвведите 2 для вывода таблицы с результатами\nвведите 3 для изменения значения\nвведите 4 для поиска лучшего времени на этапе\nвведите 5 для поиска худшего вермени на этапе\nвведите 6 для сортировки по этапу\nвведите 7 для вывода общего времени\nвведите 8 для вывода среднего времени\nвведите 9 для вывода минимального времени\nвведите 10 для вывода максимального времени\nвведите 11 для вывода результатов участника\nвведите 0 для выхода из программы\n");
		scanf("%d", &menu);
		switch (menu)
		{
		case 1:
			source_table(n, table, time);
			break;
		case 2:
			result_table(n, table, time);
			break;
		case 3:
			printf("введите строку\n");
			scanf("%d", &hh);
			printf("введите столбец\n");
			scanf("%d", &ww);
			printf("введите число с точностью до 0.1\n");
			scanf("%f", &b);
			replacement(table,ww,hh,b);
			break;
		case 4:
			puts("введите этап");
			scanf("%d", &etap);
			best_stage_time(n, table,etap);
			break;
		case 5:
			printf("введите этап\n");
			scanf("%d", &etap);
			worst_stage_time(n, table, etap);
			break;
		case 6:
			printf("введите этап\n");
			scanf("%d", &etap);
			sort_stage(n, table, etap);
			break;
		case 7:
			sumtime(time);
			break;
		case 8:
			averagetime(time);
			break;
		case 9:
			mintime(time);
			break;
		case 10:
			maxtime(time);
			break;
		case 11:
			printf("введите имя\n");
			scanf("%s", &namesearch);
			personstat(n, table, time,namesearch);
			break;
		case 0:
			menu = 0;
			break;
		}
	}
}

int readfile(char filename[FILESIZE], float table[h][w], struct nname n[SIZE],float time[SIZE])
{
	int  count = 0, k = 0;
	printf("%s\n", filename);
	FILE* file = fopen(filename, "r");
	while (!feof(file))
	{
		if (fgetc(file) == '\n')
			count++;
	}
	count++;
	count = count / 5;
	rewind(file);
	for (int i = 0; i < count; i++)
	{
		fscanf(file, "%s\n", n[i].name2);  //Чтобы имена спортсменов считывались правильно необходимо сменить кодировку с UTF-8 на ANCII
		fscanf(file, "%f\n", &table[i][k]);
		fscanf(file, "%f\n", &table[i][k + 1]);
		fscanf(file, "%f\n", &table[i][k + 2]);
		fscanf(file, "%f\n", &table[i][k + 3]);
	}
	for (int i = 0; i < count; i++)
	{
		time[i] = table[i][0] + table[i][1] + table[i][2] + table[i][3];
	}
}

void source_table(struct nname n[SIZE],float table[h][w],float time[SIZE])  //печатает исходную таблицу
{
	system("cls");
	printf("________________________________________________________________________________________________\n");
	printf("|Имя\t\t|       1 этап\t |       2 этап\t |       3 этап\t |       4 этап\t |общее время  |\n");
	for (int i = 0; i < h; i++)
	{
		printf("|%s    \t|", n[i].name2);
		for (int k = 0; k < w; k++)
		{
			printf("\t%5.1f c  |", table[i][k]);
		}
			printf("\t%5.1f c|\n", time[i]);
	}
	printf("|______________________________________________________________________________________________|\n");
	system("pause");
}

void result_table(struct nname n[SIZE], float table[h][w], float time[SIZE]) //выводит таблицу с результами
{
	system("cls");
	float time2[SIZE], table2[h][w], q;
	int mesto[SIZE], e = 1, b;
	for (int i = 0; i < h; i++)
	{
		time[i] = table[i][0] + table[i][1] + table[i][2] + table[i][3];
	}
	memcpy(time2, time, sizeof(time2));
	for (int i = 0; i < h - 1; i++)
	{
		for (int j = 0; j < h - i - 1; j++)
		{
			if (time2[j] > time2[j + 1])
			{
				q = time2[j];
				time2[j] = time2[j + 1];
				time2[j + 1] = q;
			}
		}
	}
	for (int i = 0; i < h; i++)
	{
		for (int j = 0; j < h; j++)
		{
			if (time2[j] == time[i])
			{
				strcpy(n[j].topn, n[i].name2);
				table2[j][0] = table[i][0];
				table2[j][1] = table[i][1];
				table2[j][2] = table[i][2];
				table2[j][3] = table[i][3];
			}
		}
	}
	for (int i = 0; i < h; i++)
	{
		for (int k = 0; k < h; k++)
		{
			if (abs(time2[i] - time2[k] < 0.01))
			{
				mesto[i] = i + 1;
				mesto[k] = mesto[i];
			}
			else
			{
				mesto[i] = i + 1;
			}
		}
	}
	for (int i = 0; i < h; i++)
	{
		if (mesto[i] == mesto[i + 1])
		{
			e++;
			mesto[i] = mesto[i] - 1;
			mesto[i + 1] = mesto[i];
			mesto[i + 2] = mesto[i + 1] + e;
			i = i + 3;
		}
	}
	printf("____________________________________________________________________________________________________________\n");
	printf("|Имя\t\t|       1 этап\t |       2 этап\t |       3 этап\t |       4 этап\t |общее время  |  место\t   |\n");
	for (int i = 0; i < h; i++)
	{
		printf("|%s    \t|", n[i].topn);
		for (int k = 0; k < w; k++)
		{
			printf("\t%5.1f c  |", table2[i][k]);
		}
		printf("\t%5.1f c|", time2[i]);
		printf("\t%2d |\n", mesto[i]);
	}
	printf("|__________________________________________________________________________________________________________|\n");
	system("pause");
}

float replacement(float table[h][w], int ww, int hh, float b) //изменение значений 
{
	system("cls");
	hh--;
	ww--;
	table[hh][ww] = b;
}

void best_stage_time(struct nname n[SIZE], float table[h][w], int etap) //поиск лучшего или худшего вермени на этапе
{
	system("cls");
	float best = 999999999;
	etap--;
	for (int i = 0; i < h; i++)
	{
		if (best > table[i][etap])
		{
			best = table[i][etap];
			strcpy(n[0].bestn, n[i].name2);
		}
		else
		{
			best = best;
		}
	}
	printf("|лучший результат на %d этапе| %s | %5.1f с|\n", etap + 1, n[0].bestn, best);
	system("pause");
}
void worst_stage_time(struct nname n[SIZE], float table[h][w], int etap)
{
	system("cls");
	float worst = 0;
	etap--;
	for (int i = 0; i < h; i++)
		{
			if (worst < table[i][etap])
			{
				worst = table[i][etap];
				strcpy(n[0].bestn, n[i].name2);
			}
			else
			{
				worst = worst;
			}
		}
		printf("|худший результат на %d этапе| %s | %5.1f с|\n", etap + 1, n[0].bestn, worst);
		system("pause");
	}
void sort_stage(struct nname n[SIZE], float table[h][w],int etap) //сортировка по этапу
{
	system("cls");
	int mesto[SIZE],e=1;
	float table2[h][w], q;
	memcpy(table2, table, sizeof(table2));
	etap--;
	for (int i = 0; i < h - 1; i++)
	{
		for (int j = 0; j < h - i - 1; j++)
		{
			if (table2[j][etap] > table2[j + 1][etap])
			{
				q = table2[j][etap];
				table2[j][etap] = table2[j + 1][etap];
				table2[j + 1][etap] = q;
			}
		}
	}
	for (int i = 0; i < h; i++)
	{
		for (int j = 0; j < h; j++)
		{
			if (table2[j][etap] == table[i][etap])
			{
				strcpy(n[j].topetap, n[i].name2);
			}
		}
	}

	for (int i = 0; i < h; i++)
	{
		for (int k = 0; k < h; k++)
		{
			if (abs(table2[i][etap] - table2[k][etap] < 0.01))
			{
				mesto[i] = i + 1;
				mesto[k] = mesto[i];
			}
			else
			{
				mesto[i] = i + 1;
			}
		}
	}
	for (int i = 0; i < h; i++)
	{
		if (mesto[i] == mesto[i + 1])
		{
			e++;
			mesto[i] = mesto[i] - 1;
			mesto[i + 1] = mesto[i];
			mesto[i + 2] = mesto[i + 1] + e;
			i = i + 3;
		}
	}
	printf("|Имя\t\t|       %d этап\t|      место  |\n",etap+1);
	for (int i = 0; i < h; i++)
	{
		printf("|%s    \t|", n[i].topetap);
		printf("\t%5.1f c\t|", table2[i][etap]);
		printf("\t%2d    |\n", mesto[i]);
	}
	system("pause");
}

void sumtime(float time[SIZE]) //нахождение общего времени
{
	system("cls");
	float totaltime = 0;
	for (int i = 0; i < h; i++)
	{
		totaltime += time[i];
	}
	printf("|\tобщее время\t |\n");
	printf("|\t%5.1fс\t |\n", totaltime);
	system("pause");
}

void averagetime(float time[SIZE]) //нахождение среднего времени
{
	system("cls");
	float totaltime = 0, averagetime = 0;
	for (int i = 0; i < h; i++)
	{
		totaltime += time[i];
	}
	averagetime = totaltime / h;

	printf("|среднее время|\n");
	printf("|    %5.1fс   |\n", averagetime);
	system("pause");
}

void mintime(float time[SIZE]) //нахождение минимального времени
{
	system("cls");
	float totalmin = 999999999;
	for (int i = 0; i < h; i++)
	{
		if (totalmin > time[i])
		{
			totalmin = time[i];
		}
		else
		{
			totalmin = totalmin;
		}
	}
	printf("|максимальное время|\n");
	printf("|\t%5.1fс\t   |\n", totalmin);
	system("pause");
}

void maxtime(float time[SIZE]) //нахождение максимального времени 
{
	system("cls");
	float totalmax = 0;
	for (int i = 0; i < h; i++)
	{
		if (totalmax < time[i])
		{
			totalmax = time[i];
		}
		else
		{
			totalmax = totalmax;
		}
	}
	printf("|максимальное время|\n");
	printf("|\t%5.1fс\t   |\n", totalmax);
	system("pause");
}

void personstat(struct nname n[SIZE], float table[h][w], float time[SIZE], char namesearch[SIZE]) //вывод результатов участника 
{
	system("cls");
	for (int i = 0; i < h; i++)
	{
		if (strcmp(namesearch, n[i].name2) == 0)
		{
			printf("%s %5.1f %5.1f %5.1f %5.1f %5.1f\n", n[i].name2, table[i][0], table[i][1], table[i][2], table[i][3], time[i]);
		}
	}
	system("pause");
}
